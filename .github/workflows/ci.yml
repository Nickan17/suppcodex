name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Network allowlist for strict permissions
  ALLOWED_HOSTS: "localhost,api.openfoodfacts.org,openrouter.ai,api.firecrawl.dev,supabase.co,magnumsupps.com,uaqcehoocecvihubnbhp.supabase.co"

jobs:
  # Static analysis and type checking
  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          supabase/functions/.deno_dir
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
        restore-keys: |
          ${{ runner.os }}-deno-
          
    - name: Check formatting
      run: |
        cd supabase/functions
        deno fmt --check --config _shared/deno.json
        
    - name: Run linter
      run: |
        cd supabase/functions
        deno lint --config _shared/deno.json
        
    - name: Type check
      run: |
        cd supabase/functions
        deno check --config _shared/deno.json **/*.ts

  # Unit tests (fast, no external dependencies)
  unit-tests:
    runs-on: ubuntu-latest
    needs: static-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          supabase/functions/.deno_dir
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
        restore-keys: |
          ${{ runner.os }}-deno-
          
    - name: Run unit tests with strict permissions
      run: |
        cd supabase/functions
        # Run tests excluding integration tests with strict network permissions
        deno test --allow-env --allow-read --coverage=coverage-unit --config _shared/deno.json \
          --allow-net=${{ env.ALLOWED_HOSTS }} \
          --fail-fast \
          --filter="^(?!.*Integration).*" \
          **/*.test.ts
        
    - name: Generate unit test coverage
      run: |
        cd supabase/functions
        deno coverage coverage-unit --lcov --output=coverage-unit.lcov || \
          (echo "⚠️  No covered files found, creating empty coverage report"; echo  > coverage-unit.lcov)
        
    - name: Upload unit test coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: supabase/functions/coverage-unit.lcov

  # Integration tests (slower, may hit external APIs)
  integration-tests:
    runs-on: ubuntu-latest
    needs: static-analysis
    # Only run integration tests on main branch or when explicitly requested
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'ci' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          supabase/functions/.deno_dir
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
        restore-keys: |
          ${{ runner.os }}-deno-
          
    - name: List firecrawl-extract directory
      run: ls -l supabase/functions/firecrawl-extract/
    - name: Run Quattro integration test explicitly
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_EDGE_FUNCTION_KEY: ${{ secrets.SUPABASE_EDGE_FUNCTION_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        SCRAPFLY_API_KEY: ${{ secrets.SCRAPFLY_API_KEY }}
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
        OCRSPACE_API_KEY: ${{ secrets.OCRSPACE_API_KEY }}
      run: |
        cd C:\suppcodex-3\supabase\functions\firecrawl-extract; $env:SUPABASE_URL='https://uaqcehoocecvihubnbhp.supabase.co'; deno test -A --no-check quattro.integration.test.ts
        
    - name: Generate integration test coverage
      run: |
        cd supabase/functions
        deno coverage coverage-integration --lcov --output=coverage-integration.lcov || \
          (echo "⚠️  No covered files found, creating empty coverage report"; echo  > coverage-integration.lcov)
        
    - name: Upload integration test coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: supabase/functions/coverage-integration.lcov

  # Coverage reporting
  coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Download unit test coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-unit
        path: supabase/functions/
        
    - name: Download integration test coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-integration
        path: supabase/functions/
        
    - name: Merge coverage reports
      run: |
        cd supabase/functions
        # Merge unit and integration coverage if both exist
        if [ -f coverage-unit.lcov ] && [ -f coverage-integration.lcov ]; then
          cat coverage-unit.lcov coverage-integration.lcov > coverage.lcov
        elif [ -f coverage-unit.lcov ]; then
          cp coverage-unit.lcov coverage.lcov
        elif [ -f coverage-integration.lcov ]; then
          cp coverage-integration.lcov coverage.lcov
        fi
        
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        coveralls-lcov-path: supabase/functions/coverage.lcov
        github-token: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Supabase (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Link CLI to project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      run: |
        supabase link --project-ref "$SUPABASE_PROJECT_ID"
        
    - name: Deploy Edge Functions
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: |
        cd supabase
        supabase functions deploy --project-ref "$SUPABASE_PROJECT_ID" 